{"version":3,"sources":["components/GameCard/index.js","pages/Game.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","props","className","alt","name","src","process","image","onClick","id","Game","state","cards","currentScore","highestScore","clickedCards","message","handleCardClick","currentClickedCards","indexOf","setState","shuffle","getCardById","concat","i","length","j","Math","floor","random","map","card","key","this","Component","Nav","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wuCAWeA,MARf,SAAkBC,GAChB,OACE,yBAAKC,UAAU,4BACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKC,eAAyBL,EAAMM,MAAOC,QAAS,kBAAMP,EAAMO,QAAQP,EAAMQ,S,OCgF3FC,G,iNAhFbC,MAAQ,CACNC,MAAOA,EACPC,aAAc,EACdC,aAAc,EACdC,aAAc,GACdC,QAAS,I,EAGXC,gBAAkB,SAACR,GACjB,IAAIS,EAAsB,EAAKP,MAAMI,aAGjCG,EAAoBC,QAAQV,IAAO,EACrC,EAAKW,SAAS,CACZR,MAAO,EAAKS,QAAQ,EAAKV,MAAMC,OAC/BC,aAAc,EACdE,aAAc,GACdC,QAAS,eAAiB,EAAKM,YAAYb,GAAIL,KAAO,gCAIxD,EAAKgB,SAAS,CACZR,MAAO,EAAKS,QAAQ,EAAKV,MAAMC,OAC/BC,aAAc,EAAKF,MAAME,aAAe,EACxCE,aAAcG,EAAoBK,OAAOd,GACzCO,QAAS,aAIR,EAAKL,MAAME,cAAgB,EAAKF,MAAMG,cACvC,EAAKM,SAAS,CACZN,aAAc,EAAKH,MAAME,aAAe,M,EAgBhDS,YAAc,SAACb,GACb,IAAK,IAAIe,EAAI,EAAGA,EAAIZ,EAAMa,OAAQD,IAChC,GAAIZ,EAAMY,GAAGf,KAAOA,EAClB,OAAOG,EAAMY,I,uEAZXZ,GACN,IAAK,IAAIY,EAAIZ,EAAMa,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACZ,EAAMc,GAAId,EAAMY,IAAvCZ,EAAMY,GAFkC,KAE9BZ,EAAMc,GAFwB,KAI3C,OAAOd,I,+BAYC,IAAD,OACP,OACE,yBAAKV,UAAU,kBACb,yBAAKA,UAAU,OACb,uBAAGA,UAAU,qBAAb,6EAIF,yBAAKA,UAAU,sBACZU,EAAMkB,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,iBAAcA,EAAd,CAAoBC,IAAKD,EAAKtB,GAAID,QAAS,EAAKS,uBAGpD,yBAAKf,UAAU,mBACb,wBAAIA,UAAU,SAAd,kBAAsC+B,KAAKtB,MAAME,cACjD,wBAAIX,UAAU,SAAd,kBAAsC+B,KAAKtB,MAAMG,eAEnD,yBAAKZ,UAAU,WACb,wBAAIA,UAAU,UAAU+B,KAAKtB,MAAMK,e,GA1E1BkB,cCOJC,MAVf,WACE,OACE,yBAAKjC,UAAU,kDACb,uBAAGA,UAAU,eAAekC,KAAK,KAAjC,iBCSSC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.71b25432.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nfunction GameCard(props) {\n  return (\n    <div className=\"img-container col-3 mx-*\">\n      <img alt={props.name} src={process.env.PUBLIC_URL + props.image} onClick={() => props.onClick(props.id)}/>\n    </div>\n  )\n}\n\nexport default GameCard;","import React, { Component } from \"react\";\nimport GameCard from \"../components/GameCard\";\nimport cards from \"../cards.json\";\nimport \"./style.css\"\n\nclass Game extends Component {\n  state = {\n    cards: cards,\n    currentScore: 0,\n    highestScore: 0,\n    clickedCards: [],\n    message: \"\"\n  }\n\n  handleCardClick = (id) => {\n    let currentClickedCards = this.state.clickedCards;\n\n    // If the card has been clicked already, reset game\n    if (currentClickedCards.indexOf(id) > -1) {\n      this.setState({\n        cards: this.shuffle(this.state.cards),\n        currentScore: 0,\n        clickedCards: [],\n        message: \"Incorrect!! \" + this.getCardById(id).name + \" has already been clicked!\"\n      })\n      // If card hasn't been clicked, add to clickedCards\n    } else {\n      this.setState({\n        cards: this.shuffle(this.state.cards),\n        currentScore: this.state.currentScore + 1,\n        clickedCards: currentClickedCards.concat(id),\n        message: \"Correct!\"\n      })\n\n      // Updates highest score if necessary\n      if(this.state.currentScore >= this.state.highestScore) {\n        this.setState({\n          highestScore: this.state.currentScore + 1\n        })\n      }\n    }\n  }\n\n  // Shuffles order of cards\n  shuffle(cards) {\n    for (let i = cards.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [cards[i], cards[j]] = [cards[j], cards[i]];\n    }\n    return cards;\n  }\n\n  // Returns card by matching id number; used for incorrect message\n  getCardById = (id) => {\n    for (var i = 0; i < cards.length; i++) {\n      if (cards[i].id === id) {\n        return cards[i];\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container mt-3\">\n        <div className=\"row\">\n          <p className=\"col-12 directions\">\n            Click on an image to earn points, but don't click on any more than once!\n          </p>\n        </div>\n        <div className=\"row game-container\">\n          {cards.map((card) => \n            <GameCard {...card} key={card.id} onClick={this.handleCardClick}/>\n            )}\n        </div>\n        <div className=\"row my-3 scores\">\n          <h3 className=\"col-6\">Current Score: {this.state.currentScore}</h3>\n          <h3 className=\"col-6\">Highest Score: {this.state.highestScore}</h3>\n        </div>\n        <div className=\"row msg\">\n          <h3 className=\"col-12\">{this.state.message}</h3>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Game;","import React from \"react\";\n\nfunction Nav() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Clicky Game\n      </a>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\nimport Game from \"./pages/Game\";\nimport Nav from \"./components/Nav\";\n\nfunction App() {\n  return (\n    <div>\n      <Nav/>\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}